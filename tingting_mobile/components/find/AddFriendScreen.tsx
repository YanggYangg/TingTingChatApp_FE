import React, { useEffect, useState } from "react";
import {
  View,
  Text,
  TextInput,
  StyleSheet,
  TouchableOpacity,
  Image,
  Alert,
} from "react-native";
import { Ionicons, MaterialIcons, Entypo } from "@expo/vector-icons";
import { Api_Profile } from "@/apis/api_profile";
import { Api_FriendRequest } from "@/apis/api_friendRequest";
import AsyncStorage from "@react-native-async-storage/async-storage";

//socket
import socket from "../../utils/socketFriendRequest";

const AddFriendScreen = ({ navigation }) => {
  const [phone, setPhone] = useState("");
  const [searchResult, setSearchResult] = useState(null);
  const [status, setStatus] = useState("");
  const [userId, setUserId] = useState<string | null>(null);

  // üîê L·∫•y userId t·ª´ AsyncStorage v√† k·∫øt n·ªëi socket
  useEffect(() => {
    const fetchUserId = async () => {
      try {
        const id = await AsyncStorage.getItem("userId");
        setUserId(id);

        if (id) {
          socket.connect();
          socket.emit("add_user", id);
        }
      } catch (error) {
        console.log("L·ªói l·∫•y userId t·ª´ AsyncStorage:", error);
      }
    };

    fetchUserId();

    // üëÇ L·∫Øng nghe khi l·ªùi m·ªùi ƒë∆∞·ª£c ch·∫•p nh·∫≠n
    socket.on("friend_request_accepted", ({ fromUserId }) => {
      if (searchResult && fromUserId === searchResult._id) {
        setStatus("friend");
      }
    });

    return () => {
      socket.disconnect();
      socket.off("friend_request_accepted");
    };
  }, [searchResult]);

  useEffect(() => {
    // L·∫Øng nghe khi b·ªã t·ª´ ch·ªëi l·ªùi m·ªùi
    socket.on("friend_request_rejected", ({ fromUserId }) => {
      if (searchResult && fromUserId === searchResult._id) {
        setStatus(""); // Tr·∫°ng th√°i tr·ªü l·∫°i "ch∆∞a k·∫øt b·∫°n"
        Alert.alert("‚ùå L·ªùi m·ªùi ƒë√£ b·ªã t·ª´ ch·ªëi");
      }
    });

    return () => {
      socket.off("friend_request_rejected");
    };
  }, [searchResult]);

  useEffect(() => {
    if (!userId) return;

    socket.on("friend_request_sent", ({ toUserId }) => {
      if (searchResult && toUserId === searchResult._id) {
        setStatus("pending");
      }
    });

    socket.on("friend_request_revoked_self", ({ toUserId }) => {
      if (searchResult && toUserId === searchResult._id) {
        setStatus("");
      }
    });

    return () => {
      socket.off("friend_request_sent");
      socket.off("friend_request_revoked_self");
    };
  }, [searchResult, userId]);

  // L·∫•y userId hi·ªán t·∫°i t·ª´ AsyncStorage
  useEffect(() => {
    const fetchUserId = async () => {
      try {
        const id = await AsyncStorage.getItem("userId");
        setUserId(id);
      } catch (error) {
        console.log("L·ªói l·∫•y userId t·ª´ AsyncStorage:", error);
      }
    };
    fetchUserId();
  }, []);

  const handleSearch = async () => {
    if (!userId) {
      Alert.alert("Kh√¥ng t√¨m th·∫•y userId hi·ªán t·∫°i");
      return;
    }

    try {
      const res = await Api_Profile.getProfiles();
      const allUsers = res.data.users;

      const foundUser = allUsers.find(
        (u: { phone: string }) => u.phone === phone
      );

      if (!foundUser) {
        Alert.alert("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng ");
        setSearchResult(null);
        setStatus(""); // reset status
        return;
      }

      // setSearchResult(foundUser);

      const statusRes = await Api_FriendRequest.checkFriendStatus({
        userIdA: userId,
        userIdB: foundUser._id,
      });
      // setStatus(statusRes.data);
      // setSearchResult(foundUser);//g√°n user sau c√πng
      // ‚úÖ Ch·ªâ l·∫•y field status trong object
      setStatus(statusRes.status || "not_friends");
      setSearchResult(foundUser); // g√°n user sau c√πng
      console.log("Tr·∫°ng th√°i k·∫øt b·∫°n:", statusRes.status);
    } catch (err) {
      console.error("L·ªói t√¨m ki·∫øm", err);
      setSearchResult(null);
      setStatus(""); // reset ƒë·ªÉ tr√°nh gi·ªØ l·∫°i k·∫øt qu·∫£ sai
    }
  };

  // üì© G·ª≠i ho·∫∑c thu h·ªìi l·ªùi m·ªùi k·∫øt b·∫°n qua socket
  const handleSendOrRevokeRequest = () => {
    if (!userId || !searchResult) return;

    socket.emit(
      "send_friend_request",
      {
        fromUserId: userId,
        toUserId: searchResult._id,
      },
      (response) => {
        if (response.status === "ok") {
          setStatus("pending");
          Alert.alert("ƒê√£ g·ª≠i l·ªùi m·ªùi k·∫øt b·∫°n");
        } else if (response.status === "revoked") {
          setStatus("");
          Alert.alert("ƒê√£ thu h·ªìi l·ªùi m·ªùi");
        } else {
          Alert.alert("L·ªói", response.message || "Kh√¥ng th·ªÉ x·ª≠ l√Ω y√™u c·∫ßu");
        }
      }
    );
  };

  return (
    <View style={styles.container}>
      {/* Header */}
      <View style={styles.header}>
        <TouchableOpacity onPress={() => navigation.goBack()}>
          <Ionicons name="arrow-back" size={24} color="#000" />
        </TouchableOpacity>
        <Text style={styles.headerText}>Th√™m b·∫°n</Text>
      </View>

      {/* Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i */}
      <View style={styles.phoneInputContainer}>
        <Text style={styles.prefix}>+84</Text>
        <TextInput
          style={styles.input}
          placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i"
          keyboardType="number-pad"
          value={phone}
          onChangeText={setPhone}
        />
        <TouchableOpacity onPress={handleSearch}>
          <Ionicons name="arrow-forward-circle" size={28} color="#007AFF" />
        </TouchableOpacity>
      </View>

      {/* K·∫øt qu·∫£ t√¨m ki·∫øm */}
      {searchResult && (
        <View style={styles.resultContainer}>
          <Image source={{ uri: searchResult.avatar }} style={styles.avatar} />
          <View style={{ flex: 1 }}>
            <Text style={styles.name}>
              {searchResult.firstname} {searchResult.surname}
            </Text>
            <Text style={styles.phone}>{searchResult.phone}</Text>
            <Text style={styles.status}>
              Tr·∫°ng th√°i:{" "}
              {status === "accepted"
                ? "ƒê√£ l√† b·∫°n b√®"
                : status === "pending"
                ? "ƒêang ch·ªù ph·∫£n h·ªìi"
                : "Ch∆∞a k·∫øt b·∫°n"}
            </Text>
          </View>

          {status !== "accepted" && (
            <TouchableOpacity
              style={styles.addButton}
              onPress={handleSendOrRevokeRequest}
            >
              <Text style={styles.addButtonText}>
                {status === "pending" ? "Thu h·ªìi" : "K·∫øt b·∫°n"}
              </Text>
            </TouchableOpacity>
          )}
        </View>
      )}
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 16,
    backgroundColor: "#fff",
  },
  header: {
    flexDirection: "row",
    alignItems: "center",
    gap: 16,
    marginBottom: 20,
  },
  headerText: {
    fontSize: 18,
    fontWeight: "bold",
  },
  phoneInputContainer: {
    flexDirection: "row",
    alignItems: "center",
    borderWidth: 1,
    borderColor: "#ccc",
    borderRadius: 10,
    paddingHorizontal: 10,
    marginBottom: 20,
    height: 50,
  },
  prefix: {
    fontSize: 16,
    marginRight: 8,
  },
  input: {
    flex: 1,
    fontSize: 16,
  },
  resultContainer: {
    flexDirection: "row",
    alignItems: "center",
    padding: 12,
    backgroundColor: "#f9f9f9",
    borderRadius: 10,
    borderWidth: 1,
    borderColor: "#ddd",
    gap: 12,
  },
  avatar: {
    width: 50,
    height: 50,
    borderRadius: 25,
  },
  name: {
    fontSize: 16,
    fontWeight: "600",
  },
  phone: {
    fontSize: 14,
    color: "#666",
  },
  addButton: {
    backgroundColor: "#007AFF",
    paddingVertical: 6,
    paddingHorizontal: 12,
    borderRadius: 6,
  },
  addButtonText: {
    color: "#fff",
    fontWeight: "500",
  },
});

export default AddFriendScreen;
